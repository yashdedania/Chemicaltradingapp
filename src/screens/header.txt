import {TouchableOpacity,Keyboard,NativeModules, processColor} from 'react-native';
import {Title,Left,Body,Right,Input} from 'native-base';
import hstyles from '../../../theme/styles/header';
import colors from '../../../theme/color';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import Loader from '../../../components/Loader';
import Ionicons from '@expo/vector-icons/Ionicons';
import _ from 'lodash';
import * as Animatable from 'react-native-animatable';
import searchData from '../../../api/searchfilter';
const { StatusBarManager } = NativeModules;

this.state = {
            listArray:[],
            fullData:[],
            loading:false,
            refreshing:false,
            nodatatext:'',
            blur:false,
            showToast: false,
            query:'',
            searchbarVisible:false,
            searchBarFocused:false,

        };

 this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
        this.keyboardWillShowListener = Keyboard.addListener('keyboardWillShow', this._keyboardWillShow);
        this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
   


        this.keyboardDidShowListener.remove();
        this.keyboardWillShowListener.remove();
        this.keyboardDidHideListener.remove();


_keyboardDidShow = () =>{
        if(this._isMounted && this.state.searchbarVisible){
            this.setState({searchBarFocused:true});
        }
    }
    _keyboardWillShow = () =>{
        if(this._isMounted && this.state.searchbarVisible){
            this.setState({searchBarFocused:true});
        }
    }
    _keyboardDidHide = () =>{
        if(this._isMounted){
            this.setState({searchBarFocused:false});
        }    
    }


_handleSearch = async(text) =>{
        let extra = {...this.state};
        extra.query = text;
        await this.setState({...this.state,...extra});
        this._searchQuery();
    }
    _searchQuery = ()=>{
        let extra = {...this.state};
        const formatText = extra.query.toLowerCase();
        const data = _.filter(this.state.fullData,chemical => {
            return searchData.contains(chemical,formatText);
        });
        if(data === null || data.length <= 0){
            extra.nodatatext = "No Data Available"
        }
        if(this._isMounted){
            extra.listArray = data;
            this.setState({...this.state,...extra});
        }
    }
    _showSearch = () =>{
        if(this._isMounted){
            this.setState({searchbarVisible : true});
        }
        this.view.transitionTo({backgroundColor:colors.background});
        StatusBarManager.setStyle('dark-content');
        StatusBarManager.setColor(processColor('#E0E0E0'),true);
    }
    _clearSearch = async() =>{
        console.log("Clear search excuted");
        if(this._isMounted){
            await this.setState({query:''});
        }
        this._searchQuery();
    }
    _hideSearch = async() =>{
        let extra = {...this.state};
        extra.query = '';
        extra.searchbarVisible = false;
        if(this._isMounted){
            await this.setState({...this.state,...extra});
        }
        this.view.transitionTo({backgroundColor:colors.primary});
        StatusBarManager.setStyle('light-content');
        StatusBarManager.setColor(processColor('#FF5964'),true);
        this._searchQuery();
    }
    handleViewRef = ref => this.view = ref;


                return(
                <Container style={this.state.searchBarFocused ? hstyles.blurBackground : null}>
                    <Animatable.View ref={this.handleViewRef}  style={hstyles.header}>
                            <View style={[hstyles.headerContainer,this.state.searchbarVisible ? hstyles.lightbackground : hstyles.darkbackground]}>
                            <Left style={hstyles.left}>
                                {!!this.state.searchbarVisible ? (
                                    <TouchableOpacity onPress={() => this._hideSearch()}>
                                       <Animatable.View animation="rotate" duration={500}><MaterialCommunityIcons  name="arrow-left" style={hstyles.darkicon}/></Animatable.View>
                                    </TouchableOpacity>
                                ):(
                                    <TouchableOpacity onPress={() => this.props.navigation.openDrawer()}>
                                        <MaterialCommunityIcons name="menu" style={hstyles.icon} />
                                    </TouchableOpacity>
                                )}  
                            </Left>
                            <Body style={hstyles.body}>
                                {!!this.state.searchbarVisible ? (
                                   <Input style={hstyles.inputField} placeholder="Search"  onChangeText={(text) => this._handleSearch(text)} value={this.state.query} /> 
                                ):(
                                    <Title style={hstyles.headtitle}>Pending Request</Title>
                                )}
                                
                            </Body>
                            <Right style={hstyles.right}>
                                {(!!this.state.searchbarVisible) ? (null):(
                                    <TouchableOpacity onPress={() => this._showSearch()}>
                                        <Ionicons name="ios-search" style={hstyles.icon} />
                                    </TouchableOpacity>
                                )}
                                {(!!this.state.searchbarVisible && this.state.query.length > 1) ? (
                                    <TouchableOpacity onPress={() => this._clearSearch()}>
                                        <MaterialCommunityIcons name ="close" style={hstyles.darkicon} />
                                    </TouchableOpacity>
                                ):(null)}   
                            </Right>
                            </View>
                        </Animatable.View>
                    
                    <Loader loading={this.state.loading} />
                    {(this.state.listArray !== null && this.state.listArray !== undefined && this.state.listArray.length > 0) ? 
                    (
                        <Content refreshControl={
                            <RefreshControl
                                refreshing={this.state.refreshing}
                                onRefresh={this._onRefresh}
                            />
                        }>
                        <FlatList
                            data={this.state.listArray}
                            renderItem={this._renderItem}
                            keyExtractor={item => (item.id).toString()}
                        />
                        </Content>
                    ):(
                        <View style= {gstyles.emptyContainer}>
                            <Text style={{color:'rgb(0,0,0)',fontSize:24}}>{this.state.nodatatext}</Text>
                        </View>
                    )}
                    
                </Container>
            );